1.聚合函数		
	聚合函数        支持的数据类型           描述
	sum()              数字              对指定列中的所有非空值求总和
	avg()              数字              对指定列中的所有非空值求平均值
	min()          数字  字符 dateinme   返回指定列中的最小数字，最早的日期或者最小的字符串
	max()          数字  字符 dateinme   返回指定列中的最大数字，最近的日期或者最大的字符串
	conut()        任意基于行的数据类型  统计结果集合中全部记录行的数量
	
	示例1：查询玩家表中一共有多少名玩家信息
	语法1：SELECT COUNT(USER_QQ)FROM USERS
	语法2：SELECT COUNT(*)FROM USERS

	示例2：查询QQ号是12301的玩家游戏的总分数
	语法：SELECT SUM(SCORE) AS '总分数' FROM SCORES WHERE USER_QQ='12301'

	示例3：查询QQ号是12301的玩家游戏的平均分数
	语法：SELECT AVG(SCORE) AS '平均分数' FROM SCORES WHERE USER_QQ='12302'

	示例4：查询游戏编号是1的游戏的最高分数
	语法：SELECT MAX(SCORE)AS'最高分数' FROM SCORES WHERE GNO=1
	
	示例5：查询QQ号是12302的玩家的总分，平均分和最高分
	语法：SELECT SUM(SCORE)AS'总分' AVG(SCORE)AS'平均分'  MAX(SCORE)AS'最高分'
		FROM SCORES WHERE USER_QQ='12302'
	
2.在结果集内分组
	使用GROUP BY 分组

	示例1：查询每个玩家的总分数，平均分，最高分数
	语法：SELECT SUM(SCORE)AS'总分' AVG(SCORE)AS'平均分'  MAX(SCORE)AS'最高分'
	      FROM SCORES GROUP BY  user_qq

	示例2：查询每个玩家的平均分数，并显示玩家QQ和平均分数
	语法：SELECT USER_QQ,AVG(SCORE)AS'平均分'
		FROM SCORES GROUP BY  user_qq


3.筛选分组结果
	示例1：查询平均分数大于4000的玩家QQ号，总分数，平均分数
	语法：SELECT USER_QQ,SUM(SCORE)AS'总分数',AVG(SCORE)AS'平均分数'
		FROM SCORES GROUP BY USER_QQ HAVING AVG(SCORE)>4000
	
	示例2：查询所有用户的平均分数和总分数，并按平均分倒序排列
	语法:SELECT USER_QQ,AVG(SCORE)AS'平均分数',SUM(SCORE)AS'总分数'
		FROM SCORES GROUP BY USER_QQ HAVING AVG(SCORE)DESC
	
SELECT语句的执行顺序
	1.from子句指定数据源
	2.where子句基于指定的条件对记录进行筛选
	3.group by子句将数据划分为多个分组
	4.使用聚合函数进行进一步的计算统计
	5.使用having子句筛选分组
	6.使用order by子句对结果集进行排序


	
